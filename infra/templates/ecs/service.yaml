AWSTemplateFormatVersion: '2010-09-09'
Description: ECS Service with Load Balancer

Parameters:
  ClusterName:
    Type: String
  TaskDefinitionArn:
    Type: String
  VpcId:
    Type: String
  Subnets:
    Type: CommaDelimitedList
  SecurityGroupId:
    Type: String

Resources:
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets: !Ref Subnets
      SecurityGroups: [!Ref SecurityGroupId]
      Type: application

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VpcId
      TargetType: ip
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 30
      HealthyThresholdCount: 2

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn: [LoadBalancer, TargetGroup]
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  Service:
    Type: AWS::ECS::Service
    DependsOn: [Listener, TaskDefinition]
    Properties:
      ServiceName: "cicd-ecr-service"
      Cluster: !Ref ClusterName
      LaunchType: FARGATE
      TaskDefinition: !Ref TaskDefinitionArn
      DesiredCount: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets: !Ref Subnets
          SecurityGroups: [!Ref SecurityGroupId]
      LoadBalancers:
        - ContainerName: "app"
          ContainerPort: 80
          TargetGroupArn: !Ref TargetGroup

Outputs:
  ServiceName:
    Value: !GetAtt Service.Name
    Export:
      Name: !Sub "${AWS::StackName}-ServiceName"

  LoadBalancerDNS:
    Value: !GetAtt LoadBalancer.DNSName
    Export:
      Name: !Sub "${AWS::StackName}-LoadBalancerDNS"
